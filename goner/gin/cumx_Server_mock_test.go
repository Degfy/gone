// Code generated by MockGen. DO NOT EDIT.
// Source: ../cmux/interface.go

// Package gin is a generated GoMock package.
package gin

import (
	net "net"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gone "github.com/gone-io/gone"
	cmux "github.com/soheilhy/cmux"
)

// CumxServer is a mock of Server interface.
type CumxServer struct {
	ctrl     *gomock.Controller
	recorder *CumxServerMockRecorder
}

// CumxServerMockRecorder is the mock recorder for CumxServer.
type CumxServerMockRecorder struct {
	mock *CumxServer
}

// NewCumxServer creates a new mock instance.
func NewCumxServer(ctrl *gomock.Controller) *CumxServer {
	mock := &CumxServer{ctrl: ctrl}
	mock.recorder = &CumxServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *CumxServer) EXPECT() *CumxServerMockRecorder {
	return m.recorder
}

// GetAddress mocks base method.
func (m *CumxServer) GetAddress() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddress")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAddress indicates an expected call of GetAddress.
func (mr *CumxServerMockRecorder) GetAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddress", reflect.TypeOf((*CumxServer)(nil).GetAddress))
}

// Match mocks base method.
func (m *CumxServer) Match(matcher ...cmux.Matcher) net.Listener {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range matcher {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Match", varargs...)
	ret0, _ := ret[0].(net.Listener)
	return ret0
}

// Match indicates an expected call of Match.
func (mr *CumxServerMockRecorder) Match(matcher ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Match", reflect.TypeOf((*CumxServer)(nil).Match), matcher...)
}

// Start mocks base method.
func (m *CumxServer) Start(arg0 gone.Cemetery) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *CumxServerMockRecorder) Start(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*CumxServer)(nil).Start), arg0)
}

// Stop mocks base method.
func (m *CumxServer) Stop(arg0 gone.Cemetery) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *CumxServerMockRecorder) Stop(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*CumxServer)(nil).Stop), arg0)
}

// goneFlag mocks base method.
func (m *CumxServer) goneFlag() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "goneFlag")
}

// goneFlag indicates an expected call of goneFlag.
func (mr *CumxServerMockRecorder) goneFlag() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "goneFlag", reflect.TypeOf((*CumxServer)(nil).goneFlag))
}
