// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package gin is a generated GoMock package.
package gin

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockController is a mock of Controller interface.
type MockController struct {
	ctrl     *gomock.Controller
	recorder *MockControllerMockRecorder
}

// MockControllerMockRecorder is the mock recorder for MockController.
type MockControllerMockRecorder struct {
	mock *MockController
}

// NewMockController creates a new mock instance.
func NewMockController(ctrl *gomock.Controller) *MockController {
	mock := &MockController{ctrl: ctrl}
	mock.recorder = &MockControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockController) EXPECT() *MockControllerMockRecorder {
	return m.recorder
}

// Mount mocks base method.
func (m *MockController) Mount() MountError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mount")
	ret0, _ := ret[0].(MountError)
	return ret0
}

// Mount indicates an expected call of Mount.
func (mr *MockControllerMockRecorder) Mount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mount", reflect.TypeOf((*MockController)(nil).Mount))
}

// MockHandleProxyToGin is a mock of HandleProxyToGin interface.
type MockHandleProxyToGin struct {
	ctrl     *gomock.Controller
	recorder *MockHandleProxyToGinMockRecorder
}

// MockHandleProxyToGinMockRecorder is the mock recorder for MockHandleProxyToGin.
type MockHandleProxyToGinMockRecorder struct {
	mock *MockHandleProxyToGin
}

// NewMockHandleProxyToGin creates a new mock instance.
func NewMockHandleProxyToGin(ctrl *gomock.Controller) *MockHandleProxyToGin {
	mock := &MockHandleProxyToGin{ctrl: ctrl}
	mock.recorder = &MockHandleProxyToGinMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandleProxyToGin) EXPECT() *MockHandleProxyToGinMockRecorder {
	return m.recorder
}

// Proxy mocks base method.
func (m *MockHandleProxyToGin) Proxy(handler ...HandlerFunc) []gin.HandlerFunc {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range handler {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Proxy", varargs...)
	ret0, _ := ret[0].([]gin.HandlerFunc)
	return ret0
}

// Proxy indicates an expected call of Proxy.
func (mr *MockHandleProxyToGinMockRecorder) Proxy(handler ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Proxy", reflect.TypeOf((*MockHandleProxyToGin)(nil).Proxy), handler...)
}

// ProxyForMiddleware mocks base method.
func (m *MockHandleProxyToGin) ProxyForMiddleware(handlers ...HandlerFunc) []gin.HandlerFunc {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range handlers {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProxyForMiddleware", varargs...)
	ret0, _ := ret[0].([]gin.HandlerFunc)
	return ret0
}

// ProxyForMiddleware indicates an expected call of ProxyForMiddleware.
func (mr *MockHandleProxyToGinMockRecorder) ProxyForMiddleware(handlers ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProxyForMiddleware", reflect.TypeOf((*MockHandleProxyToGin)(nil).ProxyForMiddleware), handlers...)
}

// MockXContext is a mock of XContext interface.
type MockXContext struct {
	ctrl     *gomock.Controller
	recorder *MockXContextMockRecorder
}

// MockXContextMockRecorder is the mock recorder for MockXContext.
type MockXContextMockRecorder struct {
	mock *MockXContext
}

// NewMockXContext creates a new mock instance.
func NewMockXContext(ctrl *gomock.Controller) *MockXContext {
	mock := &MockXContext{ctrl: ctrl}
	mock.recorder = &MockXContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockXContext) EXPECT() *MockXContextMockRecorder {
	return m.recorder
}

// JSON mocks base method.
func (m *MockXContext) JSON(code int, obj any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "JSON", code, obj)
}

// JSON indicates an expected call of JSON.
func (mr *MockXContextMockRecorder) JSON(code, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSON", reflect.TypeOf((*MockXContext)(nil).JSON), code, obj)
}

// String mocks base method.
func (m *MockXContext) String(code int, format string, values ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{code, format}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "String", varargs...)
}

// String indicates an expected call of String.
func (mr *MockXContextMockRecorder) String(code, format interface{}, values ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{code, format}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockXContext)(nil).String), varargs...)
}

// MockResponser is a mock of Responser interface.
type MockResponser struct {
	ctrl     *gomock.Controller
	recorder *MockResponserMockRecorder
}

// MockResponserMockRecorder is the mock recorder for MockResponser.
type MockResponserMockRecorder struct {
	mock *MockResponser
}

// NewMockResponser creates a new mock instance.
func NewMockResponser(ctrl *gomock.Controller) *MockResponser {
	mock := &MockResponser{ctrl: ctrl}
	mock.recorder = &MockResponserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResponser) EXPECT() *MockResponserMockRecorder {
	return m.recorder
}

// Failed mocks base method.
func (m *MockResponser) Failed(ctx XContext, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Failed", ctx, err)
}

// Failed indicates an expected call of Failed.
func (mr *MockResponserMockRecorder) Failed(ctx, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Failed", reflect.TypeOf((*MockResponser)(nil).Failed), ctx, err)
}

// ProcessResults mocks base method.
func (m *MockResponser) ProcessResults(context XContext, writer gin.ResponseWriter, last bool, funcName string, results ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{context, writer, last, funcName}
	for _, a := range results {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "ProcessResults", varargs...)
}

// ProcessResults indicates an expected call of ProcessResults.
func (mr *MockResponserMockRecorder) ProcessResults(context, writer, last, funcName interface{}, results ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{context, writer, last, funcName}, results...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessResults", reflect.TypeOf((*MockResponser)(nil).ProcessResults), varargs...)
}

// Success mocks base method.
func (m *MockResponser) Success(ctx XContext, data any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Success", ctx, data)
}

// Success indicates an expected call of Success.
func (mr *MockResponserMockRecorder) Success(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Success", reflect.TypeOf((*MockResponser)(nil).Success), ctx, data)
}

// MockkeepContext is a mock of keepContext interface.
type MockkeepContext struct {
	ctrl     *gomock.Controller
	recorder *MockkeepContextMockRecorder
}

// MockkeepContextMockRecorder is the mock recorder for MockkeepContext.
type MockkeepContextMockRecorder struct {
	mock *MockkeepContext
}

// NewMockkeepContext creates a new mock instance.
func NewMockkeepContext(ctrl *gomock.Controller) *MockkeepContext {
	mock := &MockkeepContext{ctrl: ctrl}
	mock.recorder = &MockkeepContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockkeepContext) EXPECT() *MockkeepContextMockRecorder {
	return m.recorder
}

// SetContext mocks base method.
func (m *MockkeepContext) SetContext(context *Context) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetContext", context)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetContext indicates an expected call of SetContext.
func (mr *MockkeepContextMockRecorder) SetContext(context interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetContext", reflect.TypeOf((*MockkeepContext)(nil).SetContext), context)
}
